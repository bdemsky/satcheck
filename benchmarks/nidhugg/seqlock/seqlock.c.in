#include <stdio.h>
#include <pthread.h>
#include <atomic>

std::atomic<int> _seq;
std::atomic<int> _data;

void seqlock_init() {
	atomic_store_explicit(&_seq, 0, std::memory_order_release);
	atomic_store_explicit(&_data, 0, std::memory_order_release);
}

int seqlock_read() {
	int old_seq = atomic_load(&_seq);
	
	int c0 = (old_seq % 2 == 1);
	if (!c0) {
		int res = atomic_load(&_data);
		int seq = atomic_load(&_seq);
    
		int c1;
		c1 = seq == old_seq;
		if (c1) { // relaxed
			return res;
		}
	}
	return -1;
}

int seqlock_write(int new_data) {
	int old_seq = atomic_load(&_seq);
	int c2 = (old_seq % 2 == 1);
	if (!c2) {
		int new_seq = old_seq + 1;
		if (atomic_compare_exchange_strong(&_seq, &old_seq, new_seq)) {
			atomic_store_explicit(&_data, new_data, std::memory_order_release);
			atomic_fetch_add(&_seq, 1);
			return true;
		}
	}
	return false;
}

void * a(void *obj) {
problemsize		seqlock_write(3);
 return NULL;
}

void * b(void *obj) {
	int r1;
problemsize		r1=seqlock_read();
 return NULL;
}

void * c(void *obj) {
	int r1;
problemsize	r1=seqlock_read();
 return NULL;
}

int main(int argc, char **argv) {
	pthread_t t1, t2, t3;
	seqlock_init();

	pthread_create(&t1, 0,&a, NULL);
	pthread_create(&t2, 0,&b, NULL);
	pthread_create(&t3, 0,&c, NULL);

	pthread_join(t1,0);
	pthread_join(t2,0);
	pthread_join(t3,0);
	return 0;
}
