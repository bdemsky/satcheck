#include <threads.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdatomic.h>
#define true 1
#define false 0


#include "ms-queue_simple.h"

queue_t queue;
void init_queue(queue_t *q, int num_threads);
void enqueue(queue_t *q, unsigned int val);
bool dequeue(queue_t *q, unsigned int *retVal);

void init_queue(queue_t *q, int num_threads) {
	struct node *newnode=malloc(sizeof (struct node));
	atomic_store(&newnode->value, 0);

	atomic_store(&newnode->next, (uintptr_t) NULL);
		/* initialize queue */
	atomic_store(&q->head, newnode);
	
	atomic_store(&q->tail, newnode);
}

void enqueue(queue_t *q, unsigned int val) {
	struct node *tail;
	struct node * node_ptr = malloc(sizeof(struct node));
	atomic_store(&node_ptr->value, val);
	
	atomic_store(&node_ptr->next, NULL);
	
	while (true) {
		tail = (struct node *) atomic_load(&q->tail);
		
		struct node * next = (struct node *) atomic_load( &tail->next);
		
		struct node * qtail = (struct node *) atomic_load(&q->tail);
		if (tail == qtail) {
			
			if (next == NULL) {
				if (atomic_compare_exchange_strong( & tail->next,& next, node_ptr))
					break;
			}
		}
		struct node * new_tailptr = (struct node *)atomic_load( &tail->next);
		atomic_compare_exchange_strong(&q->tail, & tail, new_tailptr);
		thrd_yield();
	}
	atomic_compare_exchange_strong(&q->tail, & tail, node_ptr);
}

bool dequeue(queue_t *q, unsigned int *retVal) {
	while (true) {
		struct node * head = (struct node *) atomic_load(&q->head);
		struct node * tail = (struct node *) atomic_load(&q->tail);
		struct node * next = (struct node *) atomic_load(&head->next);
		
		int t = ((struct node *) atomic_load(&q->head)) == head;
		if (t) {
			if (head == tail) {

				if (next == NULL) {
					return false; // NULL
				}
				atomic_compare_exchange_strong(&q->tail, & tail, next);
				thrd_yield();
			} else {
				*retVal = atomic_load(&next->value);
				if (atomic_compare_exchange_strong(&q->head,& head, next)) {
					return true;
				} else {
					thrd_yield();
				}
			}
		}
	}
}

static void e(void *param)
{
	int i;
	for(i=0;i<PROBLEMSIZE;i++)
		enqueue(&queue, 1);
}

static void d(void *param) {
	int val,i;
	for(i=0;i<PROBLEMSIZE;i++) {
		dequeue(&queue, &val);
	}
}

int user_main(int argc, char **argv)
{
	// MODEL_ASSERT(queue);

	init_queue(&queue, 2);

	thrd_t t1,t2;
	thrd_create(&t1, e, NULL);
	thrd_create(&t2, d, NULL);


	return 0;
}
